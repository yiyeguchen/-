import cv2
import numpy as np
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


class StoneAnalysisDemo(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_image = None
        self.setup_fonts()
        self.initUI()

    def setup_fonts(self):
        """ËÆæÁΩÆÁªü‰∏ÄÁöÑ‰øÑÊñáÂ≠ó‰ΩìÊñπÊ°à"""
        self.title_font = QFont("Segoe UI", 14, QFont.Bold)
        self.standard_font = QFont("Segoe UI", 11, QFont.Normal)
        self.small_font = QFont("Segoe UI", 9, QFont.Normal)
        self.data_font = QFont("Segoe UI", 12, QFont.Medium)
        self.button_font = QFont("Segoe UI", 11, QFont.Medium)

        plt.rcParams['font.family'] = ['Segoe UI', 'Arial Unicode MS', 'DejaVu Sans']
        plt.rcParams['axes.unicode_minus'] = False

    def initUI(self):
        self.setWindowTitle('–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —â–µ–±–Ω—è - –ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')
        self.setGeometry(100, 100, 1600, 900)
        self.setFont(self.standard_font)

        self.setStyleSheet("""
            QMainWindow { 
                background-color: #f8f9fa; 
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 14px 28px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: 500;
                font-family: 'Segoe UI', Arial, sans-serif;
                min-height: 20px;
            }
            QPushButton:hover { 
                background-color: #45a049; 
            }
            QPushButton:pressed { 
                background-color: #3d8b40; 
            }
            QPushButton:disabled { 
                background-color: #cccccc; 
                color: #888888;
            }
            QGroupBox {
                font-weight: 600;
                font-size: 13px;
                font-family: 'Segoe UI', Arial, sans-serif;
                border: 2px solid #e1e5e9;
                border-radius: 10px;
                margin-top: 15px;
                padding-top: 15px;
                background-color: white;
                color: #2c3e50;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 20px;
                padding: 5px 15px 5px 15px;
                background-color: white;
                border-radius: 5px;
                color: #2c3e50;
            }
            QLabel {
                font-family: 'Segoe UI', Arial, sans-serif;
                color: #2c3e50;
            }
            QTextEdit {
                font-family: 'Segoe UI', 'Consolas', monospace;
                font-size: 11px;
                line-height: 1.4;
            }
            QStatusBar {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 11px;
                color: #5a6c7d;
            }
        """)

        # ‰∏ªÂ∏ÉÂ±Ä
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # È°∂ÈÉ®ÊéßÂà∂Ê†è
        control_layout = QHBoxLayout()
        control_layout.setSpacing(15)

        self.load_btn = QPushButton('üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
        self.load_btn.setFont(self.button_font)
        self.load_btn.clicked.connect(self.load_image)

        self.analyze_btn = QPushButton('üîç –ö–æ–Ω—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
        self.analyze_btn.setFont(self.button_font)
        self.analyze_btn.clicked.connect(self.analyze_image)
        self.analyze_btn.setEnabled(False)

        self.demo_btn = QPushButton('üéØ –î–µ–º–æ-–æ–±—Ä–∞–∑–µ—Ü')
        self.demo_btn.setFont(self.button_font)
        self.demo_btn.clicked.connect(self.load_demo_sample)

        self.reset_btn = QPushButton('üîÑ –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞')
        self.reset_btn.setFont(self.button_font)
        self.reset_btn.clicked.connect(self.reset_analysis)
        self.reset_btn.setEnabled(False)

        control_layout.addWidget(self.load_btn)
        control_layout.addWidget(self.analyze_btn)
        control_layout.addWidget(self.demo_btn)
        control_layout.addWidget(self.reset_btn)
        control_layout.addStretch()

        main_layout.addLayout(control_layout)

        # ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü
        content_splitter = QSplitter(Qt.Horizontal)
        content_splitter.setHandleWidth(8)
        content_splitter.setStyleSheet("""
            QSplitter::handle {
                background-color: #e1e5e9;
                border-radius: 4px;
            }
            QSplitter::handle:hover {
                background-color: #cbd5db;
            }
        """)

        # Â∑¶‰æßÔºöÂõæÂÉèÊòæÁ§∫
        self.create_image_panel(content_splitter)

        # Âè≥‰æßÔºöÂàÜÊûêÁªìÊûú
        self.create_analysis_panel(content_splitter)

        content_splitter.setSizes([800, 800])
        main_layout.addWidget(content_splitter)

        # Áä∂ÊÄÅÊ†è
        status_bar = self.statusBar()
        status_bar.setFont(self.small_font)
        status_bar.showMessage('–ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω—Ç—É—Ä–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —â–µ–±–Ω—è')

    def create_image_panel(self, parent):
        """ÂàõÂª∫‰ºòÂåñÁöÑÂõæÂÉèÊòæÁ§∫Èù¢Êùø"""
        image_widget = QWidget()
        layout = QVBoxLayout(image_widget)
        layout.setSpacing(15)
        layout.setContentsMargins(15, 15, 15, 15)

        # ÂéüÂßãÂõæÂÉè
        original_group = QGroupBox("üì∑ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        original_group.setFont(self.title_font)
        original_layout = QVBoxLayout(original_group)
        original_layout.setContentsMargins(15, 25, 15, 15)

        self.original_label = QLabel()
        self.original_label.setAlignment(Qt.AlignCenter)
        self.original_label.setMinimumSize(350, 250)
        self.original_label.setFont(self.standard_font)
        self.original_label.setStyleSheet("""
            border: 3px dashed #cbd5db;
            background-color: #f8f9fa;
            border-radius: 12px;
            color: #6c757d;
            font-size: 14px;
            padding: 20px;
        """)
        self.original_label.setText("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-–æ–±—Ä–∞–∑–µ—Ü")

        original_layout.addWidget(self.original_label)

        # Â§ÑÁêÜÁªìÊûú
        result_group = QGroupBox("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        result_group.setFont(self.title_font)
        result_layout = QVBoxLayout(result_group)
        result_layout.setContentsMargins(15, 25, 15, 15)

        self.result_label = QLabel()
        self.result_label.setAlignment(Qt.AlignCenter)
        self.result_label.setMinimumSize(350, 250)
        self.result_label.setFont(self.standard_font)
        self.result_label.setStyleSheet("""
            border: 3px dashed #cbd5db;
            background-color: #f8f9fa;
            border-radius: 12px;
            color: #6c757d;
            font-size: 14px;
            padding: 20px;
        """)
        self.result_label.setText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n–±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∑–¥–µ—Å—å")

        result_layout.addWidget(self.result_label)

        layout.addWidget(original_group)
        layout.addWidget(result_group)

        parent.addWidget(image_widget)

    def create_analysis_panel(self, parent):
        """ÂàõÂª∫ÂàÜÊûêÁªìÊûúÈù¢Êùø"""
        analysis_widget = QWidget()
        layout = QVBoxLayout(analysis_widget)
        layout.setSpacing(15)
        layout.setContentsMargins(15, 15, 15, 15)

        # ËΩÆÂªìÁªüËÆ°‰ø°ÊÅØ
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤")
        stats_group.setFont(self.title_font)
        stats_layout = QGridLayout(stats_group)
        stats_layout.setContentsMargins(20, 30, 20, 20)
        stats_layout.setSpacing(15)

        # ÁªüËÆ°Ê†áÁ≠æ
        self.stats = {
            "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—É—Ä–æ–≤": QLabel("--"),
            "–ü–ª–æ—â–∞–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞": QLabel("--"),
            "–ü–µ—Ä–∏–º–µ—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞": QLabel("--"),
            "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π": QLabel("--")
        }

        row = 0
        for name, label in self.stats.items():
            name_label = QLabel(name + ":")
            name_label.setFont(self.standard_font)
            name_label.setStyleSheet("font-weight: 600; color: #495057;")

            label.setFont(self.data_font)
            label.setStyleSheet(
                "color: #007bff; font-weight: 600; padding: 5px 10px; background-color: #f8f9ff; border-radius: 6px;")

            stats_layout.addWidget(name_label, row, 0)
            stats_layout.addWidget(label, row, 1)
            row += 1

        layout.addWidget(stats_group)

        # È¢úËâ≤ÁºñÁ†ÅËØ¥Êòé
        legend_group = QGroupBox("üé® –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞")
        legend_group.setFont(self.title_font)
        legend_layout = QVBoxLayout(legend_group)
        legend_layout.setContentsMargins(20, 25, 20, 20)

        red_label = QLabel("üî¥ –ö—Ä–∞—Å–Ω—ã–π: –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ç—É—Ä—ã")
        red_label.setFont(self.standard_font)
        red_label.setStyleSheet("color: #dc3545; font-weight: 500; padding: 5px;")

        blue_label = QLabel("üîµ –°–∏–Ω–∏–π: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—É—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏")
        blue_label.setFont(self.standard_font)
        blue_label.setStyleSheet("color: #007bff; font-weight: 500; padding: 5px;")

        green_label = QLabel("üü¢ –ó–µ–ª–µ–Ω—ã–π: –í—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∫–æ–Ω—Ç—É—Ä")
        green_label.setFont(self.standard_font)
        green_label.setStyleSheet("color: #28a745; font-weight: 500; padding: 5px;")

        legend_layout.addWidget(red_label)
        legend_layout.addWidget(blue_label)
        legend_layout.addWidget(green_label)

        layout.addWidget(legend_group)

        # ÂõæË°®Âå∫Âüü
        chart_group = QGroupBox("üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π")
        chart_group.setFont(self.title_font)
        chart_layout = QVBoxLayout(chart_group)
        chart_layout.setContentsMargins(15, 25, 15, 15)

        self.figure = Figure(figsize=(8, 6), dpi=100)
        self.figure.patch.set_facecolor('white')
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setMinimumHeight(300)
        chart_layout.addWidget(self.canvas)

        layout.addWidget(chart_group)

        # ËØ¶ÁªÜÊä•Âëä
        report_group = QGroupBox("üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç")
        report_group.setFont(self.title_font)
        report_layout = QVBoxLayout(report_group)
        report_layout.setContentsMargins(15, 25, 15, 15)

        self.report_text = QTextEdit()
        self.report_text.setMaximumHeight(150)
        self.report_text.setFont(self.standard_font)
        self.report_text.setStyleSheet("""
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            background-color: #f8f9fa;
            line-height: 1.5;
        """)
        self.report_text.setPlainText("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

        report_layout.addWidget(self.report_text)
        layout.addWidget(report_group)

        parent.addWidget(analysis_widget)

    def load_image(self):
        """Âä†ËΩΩÂõæÂÉèÊñá‰ª∂"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —â–µ–±–Ω—è", "",
            "–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (*.png *.jpg *.jpeg *.bmp);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )

        if file_path:
            try:
                img_np = np.fromfile(file_path, dtype=np.uint8)
                self.current_image = cv2.imdecode(img_np, cv2.IMREAD_COLOR)

                if self.current_image is not None:
                    self.display_image(self.current_image, self.original_label)
                    self.analyze_btn.setEnabled(True)
                    self.reset_btn.setEnabled(True)
                    self.statusBar().showMessage(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path.split("/")[-1]}')
                else:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def load_demo_sample(self):
        """Âä†ËΩΩÊºîÁ§∫Ê†∑Êú¨"""
        demo_image = self.create_demo_image()
        self.current_image = demo_image
        self.display_image(demo_image, self.original_label)
        self.analyze_btn.setEnabled(True)
        self.reset_btn.setEnabled(True)
        self.statusBar().showMessage('–ó–∞–≥—Ä—É–∂–µ–Ω –¥–µ–º–æ-–æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')

    def create_demo_image(self):
        """ÂàõÂª∫Ê®°ÊãüÁ¢éÁü≥ÂõæÂÉè"""
        img = np.ones((400, 600, 3), dtype=np.uint8) * 200
        np.random.seed(42)

        colors = [
            (120, 120, 120),  # ÁÅ∞Ëâ≤
            (180, 180, 180),  # ÊµÖÁÅ∞Ëâ≤
            (100, 150, 200),  # ËìùÁÅ∞Ëâ≤
            (150, 130, 100),  # Ë§êËâ≤
            (200, 200, 200),  # ÁôΩËâ≤
        ]

        for _ in range(150):
            x = np.random.randint(20, 580)
            y = np.random.randint(20, 380)
            size = np.random.randint(8, 25)
            color = colors[np.random.randint(0, len(colors))]

            cv2.ellipse(img, (x, y), (size, int(size * 0.8)),
                        np.random.randint(0, 180), 0, 360, color, -1)
            cv2.ellipse(img, (x, y), (size, int(size * 0.8)),
                        np.random.randint(0, 180), 0, 360, (80, 80, 80), 1)

        noise = np.random.normal(0, 10, img.shape).astype(np.int16)
        img = np.clip(img.astype(np.int16) + noise, 0, 255).astype(np.uint8)

        return img

    def reset_analysis(self):
        """ÈáçÁΩÆÂàÜÊûêÁªìÊûú"""
        if self.current_image is not None:
            # ÈáçÁΩÆÊòæÁ§∫‰∏∫ÂéüÂßãÂõæÂÉè
            self.display_image(self.current_image, self.result_label)

            # ÈáçÁΩÆÁªüËÆ°‰ø°ÊÅØ
            for label in self.stats.values():
                label.setText("--")

            # Ê∏ÖÁ©∫ÂõæË°®
            self.figure.clear()
            self.canvas.draw()

            # ÈáçÁΩÆÊä•Âëä
            self.report_text.setPlainText("–ê–Ω–∞–ª–∏–∑ —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ö–æ–Ω—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

            self.statusBar().showMessage('–ê–Ω–∞–ª–∏–∑ —Å–±—Ä–æ—à–µ–Ω')

    def analyze_image(self):
        """ÊâßË°å‰∏ìÁî®ËΩÆÂªìÂàÜÊûê"""
        if self.current_image is None:
            return

        try:
            self.statusBar().showMessage('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...')
            QApplication.processEvents()

            # ÊâßË°åÊ†∏ÂøÉËΩÆÂªìÂàÜÊûêÁÆ°Á∫ø
            contour_results = self.perform_contour_analysis(self.current_image)

            # Êõ¥Êñ∞ÊòæÁ§∫
            self.update_analysis_display(contour_results)

            # ÂàõÂª∫Âπ∂ÊòæÁ§∫‰∏ìÁî®ËΩÆÂªìÁªìÊûúÂõæÂÉèÔºàÊó†ÊñáÊú¨Âè†Âä†Ôºâ
            processed_img = self.create_contour_result_image(self.current_image, contour_results)
            self.display_image(processed_img, self.result_label)

            self.statusBar().showMessage('–ö–æ–Ω—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    def perform_contour_analysis(self, img):
        """
        Ê†∏ÂøÉËΩÆÂªìÂàÜÊûêÁÆ°Á∫ø
        ÂÆûÁé∞Ê®°ÂùóIÂíåÊ®°ÂùóIIÁöÑÂäüËÉΩÔºåÊ£ÄÊµã‰∏§‰∏™ÊúÄÂ§ßÁöÑËΩÆÂªì
        """
        # È¢ÑÂ§ÑÁêÜ
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # ‰ΩøÁî®CannyËæπÁºòÊ£ÄÊµãÔºåÁ±ª‰ººmain.pyÁöÑÊñπÊ≥ï
        edges = cv2.Canny(gray, 50, 200)
        
        # Ê®°ÂùóI: Âü∫Á°ÄËΩÆÂªìÊèêÂèñ
        contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

        # ËøáÊª§Â∞èÈù¢ÁßØËΩÆÂªì
        min_area = 50
        valid_contours = [c for c in contours if cv2.contourArea(c) > min_area]

        # ÊåâÈù¢ÁßØÊéíÂ∫èËΩÆÂªìÔºàÈôçÂ∫èÔºâ
        sorted_contours = sorted(valid_contours, key=cv2.contourArea, reverse=True)

        # Ê®°ÂùóII: Ëé∑Âèñ‰∏§‰∏™ÊúÄÂ§ßÈù¢ÁßØËΩÆÂªì
        largest_contour = sorted_contours[0] if len(sorted_contours) > 0 else None
        second_largest_contour = sorted_contours[1] if len(sorted_contours) > 1 else None

        contour_areas = []
        for contour in valid_contours:
            area = cv2.contourArea(contour)
            contour_areas.append(area)

        # ËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ
        total_area = sum(contour_areas)
        largest_area = cv2.contourArea(largest_contour) if largest_contour is not None else 0
        second_largest_area = cv2.contourArea(second_largest_contour) if second_largest_contour is not None else 0
        largest_perimeter = cv2.arcLength(largest_contour, True) if largest_contour is not None else 0
        area_ratio = (largest_area / total_area * 100) if total_area > 0 else 0

        return {
            "all_contours": valid_contours,
            "largest_contour": largest_contour,
            "second_largest_contour": second_largest_contour,
            "contour_count": len(valid_contours),
            "largest_area": largest_area,
            "second_largest_area": second_largest_area,
            "largest_perimeter": largest_perimeter,
            "total_area": total_area,
            "area_ratio": area_ratio,
            "contour_areas": contour_areas
        }

    def create_contour_result_image(self, img, contour_results):
        """
        ÂàõÂª∫‰∏ìÁî®ËΩÆÂªìÁªìÊûúÂõæÂÉè
        ÊòæÁ§∫‰∏§‰∏™ÊúÄÂ§ßÁöÑËΩÆÂªìÔºö
        - Á∫¢Ëâ≤Âü∫Á°ÄËΩÆÂªì
        - ËìùËâ≤ÊúÄÂ§ßÈù¢ÁßØËΩÆÂªì
        - ÁªøËâ≤Á¨¨‰∫åÂ§ßÈù¢ÁßØËΩÆÂªì
        """
        # ÂàõÂª∫ÂéüÂßãÂõæÂÉèÁöÑÂâØÊú¨
        result_img = img.copy()

        # Ê®°ÂùóIÂèØËßÜÂåñ: Á∫¢Ëâ≤Âü∫Á°ÄËΩÆÂªì (RGB: 255,0,0)
        all_contours = contour_results["all_contours"]
        cv2.drawContours(result_img, all_contours, -1, (0, 0, 255), 2)  # OpenCV‰ΩøÁî®BGRÊ†ºÂºè

        # Ê®°ÂùóIIÂèØËßÜÂåñ: ËìùËâ≤ÊúÄÂ§ßÈù¢ÁßØËΩÆÂªì (RGB: 0,0,255)
        largest_contour = contour_results["largest_contour"]
        if largest_contour is not None:
            cv2.drawContours(result_img, [largest_contour], -1, (255, 0, 0), 10)  # ËìùËâ≤ÔºåÁ≤óÁ∫øÊù°Á™ÅÂá∫ÊòæÁ§∫

        # ÁªøËâ≤Á¨¨‰∫åÂ§ßÈù¢ÁßØËΩÆÂªì (RGB: 0,255,0)
        second_largest_contour = contour_results["second_largest_contour"]
        if second_largest_contour is not None:
            cv2.drawContours(result_img, [second_largest_contour], -1, (0, 255, 0), 10)  # ÁªøËâ≤ÔºåÁ≤óÁ∫øÊù°Á™ÅÂá∫ÊòæÁ§∫

        # ‰∏•Ê†ºÁ∫¶ÊùüÔºö‰∏çÊ∑ªÂä†‰ªª‰ΩïÊñáÊú¨ÊàñÂÖ∂‰ªñÊ†áËÆ∞
        return result_img

    def update_analysis_display(self, contour_results):
        """Êõ¥Êñ∞ÂàÜÊûêÁªìÊûúÊòæÁ§∫"""
        # Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        self.stats["–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—É—Ä–æ–≤"].setText(str(contour_results["contour_count"]))
        self.stats["–ü–ª–æ—â–∞–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞"].setText(f"{contour_results['largest_area']:.0f} px¬≤")
        self.stats["–ü–µ—Ä–∏–º–µ—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞"].setText(f"{contour_results['largest_perimeter']:.1f} px")
        self.stats["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π"].setText(f"{contour_results['area_ratio']:.1f}%")

        # Êõ¥Êñ∞ÂõæË°®
        self.update_contour_charts(contour_results)

        # Êõ¥Êñ∞Êä•Âëä
        self.update_contour_report(contour_results)

    def update_contour_charts(self, contour_results):
        """Êõ¥Êñ∞ËΩÆÂªìÂàÜÊûêÂõæË°®"""
        self.figure.clear()

        # ÂàõÂª∫Èù¢ÁßØÂàÜÂ∏ÉÁõ¥ÊñπÂõæ
        ax = self.figure.add_subplot(1, 1, 1)

        contour_areas = contour_results["contour_areas"]
        if contour_areas:
            # ÂàõÂª∫Áõ¥ÊñπÂõæ
            n, bins, patches = ax.hist(contour_areas, bins=20, alpha=0.7, color='#6c757d', edgecolor='white')

            # Ê†áËÆ∞ÊúÄÂ§ßÈù¢ÁßØ
            largest_area = contour_results["largest_area"]
            ax.axvline(x=largest_area, color='#007bff', linestyle='--', linewidth=2,
                       label=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {largest_area:.0f} px¬≤')
            
            # Ê†áËÆ∞Á¨¨‰∫åÂ§ßÈù¢ÁßØ
            second_largest_area = contour_results["second_largest_area"]
            if second_largest_area > 0:
                ax.axvline(x=second_largest_area, color='#28a745', linestyle='--', linewidth=2,
                           label=f'–í—Ç–æ—Ä–∞—è –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ: {second_largest_area:.0f} px¬≤')

            ax.set_xlabel("–ü–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞ (–ø–∏–∫—Å–µ–ª–∏¬≤)", fontdict={'family': 'Segoe UI', 'size': 10})
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—É—Ä–æ–≤", fontdict={'family': 'Segoe UI', 'size': 10})
            ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π –∫–æ–Ω—Ç—É—Ä–æ–≤",
                         fontdict={'family': 'Segoe UI', 'size': 11, 'weight': 'bold'})
            ax.legend()
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.set_facecolor('#fafbfc')

        self.figure.tight_layout()
        self.canvas.draw()

    def update_contour_report(self, contour_results):
        """Êõ¥Êñ∞ËΩÆÂªìÂàÜÊûêÊä•Âëä"""
        report = f"""üîç –û–¢–ß–ï–¢ –ö–û–ù–¢–£–†–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
{'‚ïê' * 45}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø:
  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: {contour_results['contour_count']} —à—Ç.
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {contour_results['largest_area']:.0f} –ø–∏–∫—Å–µ–ª–µ–π¬≤
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä: {contour_results['largest_perimeter']:.1f} –ø–∏–∫—Å–µ–ª–µ–π
  ‚Ä¢ –î–æ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞: {contour_results['area_ratio']:.1f}%

üéØ –î–í–ê –ö–†–£–ü–ù–ï–ô–®–ò–• –ö–û–ù–¢–£–†–ê:
  üîµ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—É—Ä (—Å–∏–Ω–∏–π):
    - –ü–ª–æ—â–∞–¥—å: {contour_results['largest_area']:.0f} px¬≤
    - –ü–µ—Ä–∏–º–µ—Ç—Ä: {contour_results['largest_perimeter']:.1f} px
    - –î–æ–ª—è –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏: {contour_results['area_ratio']:.1f}%
  
  üü¢ –í—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ (–∑–µ–ª–µ–Ω—ã–π):
    - –ü–ª–æ—â–∞–¥—å: {contour_results['second_largest_area']:.0f} px¬≤
    - –î–æ–ª—è –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏: {(contour_results['second_largest_area']/contour_results['total_area']*100 if contour_results['total_area'] > 0 else 0):.1f}%

üé® –¶–í–ï–¢–û–í–ê–Ø –ö–û–î–ò–†–û–í–ö–ê:
  üî¥ –ö—Ä–∞—Å–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: –í—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ç—É—Ä—ã
  üîµ –°–∏–Ω–∏–π –∫–æ–Ω—Ç—É—Ä: –ö–æ–Ω—Ç—É—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é
  üü¢ –ó–µ–ª–µ–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: –í—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∫–æ–Ω—Ç—É—Ä

üìà –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:
  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å: {np.mean(contour_results['contour_areas']):.1f} px¬≤
  ‚Ä¢ –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {contour_results['total_area']:.0f} px¬≤
  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(contour_results['contour_areas']):.1f} px¬≤

üî¨ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
–ö–æ–Ω—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –æ–±—ä–µ–∫—Ç 
—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {contour_results['area_ratio']:.1f}% –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏."""

        self.report_text.setPlainText(report)

    def display_image(self, cv_img, label):
        """Âú®Ê†áÁ≠æ‰∏≠ÊòæÁ§∫ÂõæÂÉè"""
        if cv_img is None:
            return

        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        height, width, channel = rgb_image.shape
        bytes_per_line = 3 * width

        q_image = QImage(rgb_image.data, width, height, bytes_per_line, QImage.Format_RGB888)

        pixmap = QPixmap.fromImage(q_image)
        label_size = label.size()
        scaled_pixmap = pixmap.scaled(
            int(label_size.width() * 0.85),
            int(label_size.height() * 0.85),
            Qt.KeepAspectRatio,
            Qt.SmoothTransformation
        )

        label.setPixmap(scaled_pixmap)


if __name__ == "__main__":
    app = QApplication(sys.argv)

    app.setApplicationName("–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —â–µ–±–Ω—è")
    app.setApplicationVersion("2.0 –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å")
    app.setFont(QFont("Segoe UI", 10))

    window = StoneAnalysisDemo()
    window.show()

    sys.exit(app.exec_())